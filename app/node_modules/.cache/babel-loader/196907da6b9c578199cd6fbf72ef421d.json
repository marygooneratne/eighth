{"ast":null,"code":"var _jsxFileName = \"/Users/Goon/Desktop/eighth/app/src/components/ExplorerGraph.js\";\nimport { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport React, { useState } from \"react\"; //import 'graphstyle.css';\n\nimport ReactFrappeChart from \"react-frappe-charts\";\n\nvar get_dates_before = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = 0;\n\n  while (fullArray[dateIndex] < stopDate && !(dateIndex > fullArray.length)) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex++;\n  }\n\n  return dateArray;\n};\n\nvar get_dates_after = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = fullArray.length - 1;\n\n  while (fullArray[dateIndex] > stopDate && dateIndex >= 0) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex--;\n  }\n\n  return dateArray;\n};\n\nvar parse_response = function (resp) {\n  var change_transform = function (org) {\n    var changed = org[\"values\"];\n\n    for (var i = 0; i < changed.length; i++) {\n      changed[i][\"date\"] = new Date(changed[i][\"date\"] + \"T00:00:00\");\n    }\n\n    org[\"values\"] = changed;\n    return org;\n  };\n\n  var parsed = JSON.parse(resp);\n  parsed[0][\"value\"] = new Date(parsed[0][\"value\"] + \"T00:00:00\");\n  parsed[1][\"value\"] = new Date(parsed[1][\"value\"] + \"T00:00:00\");\n  var parsed_transforms = parsed[2][\"value\"];\n  parsed_transforms = parsed_transforms.map(transform => change_transform(transform));\n  parsed[2][\"value\"] = parsed_transforms;\n  return parsed;\n};\n\nexport const ExplorerGraph = () => {\n  const json = '[{\"name\": \"start_date\", \"value\":\"2020-01-01\"},{\"name\": \"end_date\", \"value\":\"2020-01-04\"}, {\"name\": \"Transformations\", \"value\": [{\"ticker\": \"AAPL\",\"transformation\": \"Close\",\"values\":[{\"date\":\"2020-01-01\",\"values\":[{\"Close\": 345.45}]},{\"date\":\"2020-01-02\",\"values\":[{\"Close\": 325.45}]}]},{\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"2020-01-03\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71}, {\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]},{\"date\": \"2020-01-04\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},{\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]}]}]}]'; // Parse and label parts of response\n\n  var response = parse_response(json);\n  var t = response[2];\n  var t_values = t[\"value\"];\n  var start_date = response[0][\"value\"];\n  var end_date = response[1][\"value\"]; // Find transform with << start date and >>> end date\n\n  var correct_start = t_values.filter(transform => transform[\"values\"][0][\"date\"].getTime() == start_date.getTime())[0];\n  var correct_end = t_values.filter(transform => transform[\"values\"][transform[\"values\"].length - 1][\"date\"].getTime() == end_date.getTime())[0]; // create array of dates from earliest start and array of dates from latest start\n\n  var start_array = correct_start[\"values\"].map(data => data[\"date\"]);\n  var end_array = correct_end[\"values\"].map(data => data[\"date\"]); // iterate through transforms and add empty dates to create consistent length\n\n  for (var i = 0; i < t_values.length; i++) {\n    console.log(i);\n    var full_values = t_values[i][\"values\"];\n    var prepend_dates = get_dates_before(start_array, full_values[0][\"date\"]);\n    console.log(Object.keys(full_values[0][\"values\"]));\n\n    for (var date_key = prepend_dates.length - 1; date_key >= 0; date_key--) {\n      var entry = {\n        date: prepend_dates[date_key],\n        values: []\n      };\n      full_values.unshift(entry);\n    }\n\n    var append_dates = get_dates_after(end_array, full_values[full_values.length - 1][\"date\"]);\n\n    for (var date_key = append_dates.length - 1; date_key >= 0; date_key--) {\n      var entry = {\n        date: append_dates[date_key],\n        values: []\n      };\n      full_values.push(entry);\n    }\n\n    t_values[i][\"values\"] = full_values; //can u change array in for each loop\n  }\n\n  response[2][\"value\"] = t_values; //split\n  // Create full date array\n\n  console.log(response[2][\"value\"]);\n  var full_dates = response[2][\"value\"][0][\"values\"].map(full => full[\"date\"]);\n  console.log(full_dates);\n  var dataset_dictionary = {}; // {\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"01-03-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},\n  // // Create dataset of values for each transform and subtransform\n\n  for (var transform_index in response[2][\"value\"]) {\n    var transform = response[2][\"value\"][transform_index];\n    const ticker = transform[\"ticker\"];\n    const transform_name = transform[\"transformation\"];\n\n    for (var day_index in transform[\"values\"]) {\n      var day = transform[\"values\"][day_index];\n\n      for (var value_index in day[\"values\"]) {\n        var value = day[\"values\"][value_index];\n        var value_name = Object.keys(value)[0];\n        var dataset_name = ticker + \" (\" + transform_name + \")\" + \" â€” \" + value_name;\n\n        if (!Object.keys(dataset_dictionary).includes(dataset_name)) {\n          dataset_dictionary[dataset_name] = [];\n        }\n\n        dataset_dictionary[dataset_name].push(value[value_name]);\n      }\n    }\n  } // Convert dictionary into dataset\n\n\n  var datasets = [];\n  Object.keys(dataset_dictionary).forEach(function (key) {\n    datasets.push({\n      name: key,\n      chartType: \"line\",\n      values: dataset_dictionary[key]\n    });\n  });\n  console.log(dataset_dictionary);\n  console.log(datasets);\n  const data = {\n    labels: full_dates,\n    datasets: datasets,\n    yMarkers: [{\n      label: \"High\",\n      value: 60,\n      options: {\n        labelPos: \"left\"\n      }\n    }]\n  };\n  return /*#__PURE__*/React.createElement(ReactFrappeChart, {\n    data: data,\n    title: \"APPL vs. MACD(MSFT)\",\n    type: \"axis-mixed\",\n    height: \"600\",\n    colors: [\"#25282A\", \"#492083\", \"light-blue\"],\n    axisOptions: {\n      xAxisMode: \"tick\",\n      xIsSeries: true\n    },\n    barOptions: {\n      stacked: false,\n      spaceRatio: 0.2\n    },\n    tooltipOptions: {\n      formatTooltipX: d => (d + \"\").toUpperCase(),\n      formatTooltipY: d => d + \" pts\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/Goon/Desktop/eighth/app/src/components/ExplorerGraph.js"],"names":["Chart","React","useState","ReactFrappeChart","get_dates_before","fullArray","stopDate","dateArray","dateIndex","length","push","get_dates_after","parse_response","resp","change_transform","org","changed","i","Date","parsed","JSON","parse","parsed_transforms","map","transform","ExplorerGraph","json","response","t","t_values","start_date","end_date","correct_start","filter","getTime","correct_end","start_array","data","end_array","console","log","full_values","prepend_dates","Object","keys","date_key","entry","date","values","unshift","append_dates","full_dates","full","dataset_dictionary","transform_index","ticker","transform_name","day_index","day","value_index","value","value_name","dataset_name","includes","datasets","forEach","key","name","chartType","labels","yMarkers","label","options","labelPos","xAxisMode","xIsSeries","stacked","spaceRatio","formatTooltipX","d","toUpperCase","formatTooltipY"],"mappings":"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","sourcesContent":["import { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport React, { useState } from \"react\";\n//import 'graphstyle.css';\nimport ReactFrappeChart from \"react-frappe-charts\";\n\nvar get_dates_before = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = 0;\n  while (fullArray[dateIndex] < stopDate && !(dateIndex > fullArray.length)) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex++;\n  }\n  return dateArray;\n};\n\nvar get_dates_after = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = fullArray.length - 1;\n  while (fullArray[dateIndex] > stopDate && dateIndex >= 0) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex--;\n  }\n  return dateArray;\n};\n\nvar parse_response = function (resp) {\n  var change_transform = function (org) {\n    var changed = org[\"values\"];\n    for (var i = 0; i < changed.length; i++) {\n      changed[i][\"date\"] = new Date(changed[i][\"date\"] + \"T00:00:00\");\n    }\n    org[\"values\"] = changed;\n    return org;\n  };\n\n  var parsed = JSON.parse(resp);\n  parsed[0][\"value\"] = new Date(parsed[0][\"value\"] + \"T00:00:00\");\n  parsed[1][\"value\"] = new Date(parsed[1][\"value\"] + \"T00:00:00\");\n\n  var parsed_transforms = parsed[2][\"value\"];\n  parsed_transforms = parsed_transforms.map((transform) =>\n    change_transform(transform)\n  );\n  parsed[2][\"value\"] = parsed_transforms;\n\n  return parsed;\n};\n\nexport const ExplorerGraph = () => {\n  const json =\n    '[{\"name\": \"start_date\", \"value\":\"2020-01-01\"},{\"name\": \"end_date\", \"value\":\"2020-01-04\"}, {\"name\": \"Transformations\", \"value\": [{\"ticker\": \"AAPL\",\"transformation\": \"Close\",\"values\":[{\"date\":\"2020-01-01\",\"values\":[{\"Close\": 345.45}]},{\"date\":\"2020-01-02\",\"values\":[{\"Close\": 325.45}]}]},{\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"2020-01-03\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71}, {\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]},{\"date\": \"2020-01-04\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},{\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]}]}]}]';\n  // Parse and label parts of response\n  var response = parse_response(json);\n  var t = response[2];\n  var t_values = t[\"value\"];\n  var start_date = response[0][\"value\"];\n  var end_date = response[1][\"value\"];\n  // Find transform with << start date and >>> end date\n  var correct_start = t_values.filter(\n    (transform) =>\n      transform[\"values\"][0][\"date\"].getTime() == start_date.getTime()\n  )[0];\n  var correct_end = t_values.filter(\n    (transform) =>\n      transform[\"values\"][transform[\"values\"].length - 1][\"date\"].getTime() ==\n      end_date.getTime()\n  )[0];\n  // create array of dates from earliest start and array of dates from latest start\n  var start_array = correct_start[\"values\"].map((data) => data[\"date\"]);\n  var end_array = correct_end[\"values\"].map((data) => data[\"date\"]);\n\n  // iterate through transforms and add empty dates to create consistent length\n  for (var i = 0; i < t_values.length; i++) {\n    console.log(i);\n    var full_values = t_values[i][\"values\"];\n    var prepend_dates = get_dates_before(start_array, full_values[0][\"date\"]);\n    console.log(Object.keys(full_values[0][\"values\"]));\n    for (var date_key = prepend_dates.length - 1; date_key >= 0; date_key--) {\n      var entry = { date: prepend_dates[date_key], values: [] };\n      full_values.unshift(entry);\n    }\n    var append_dates = get_dates_after(\n      end_array,\n      full_values[full_values.length - 1][\"date\"]\n    );\n    for (var date_key = append_dates.length - 1; date_key >= 0; date_key--) {\n      var entry = { date: append_dates[date_key], values: [] };\n      full_values.push(entry);\n    }\n    t_values[i][\"values\"] = full_values; //can u change array in for each loop\n  }\n  response[2][\"value\"] = t_values;\n  //split\n  // Create full date array\n  console.log(response[2][\"value\"]);\n\n  var full_dates = response[2][\"value\"][0][\"values\"].map(\n    (full) => full[\"date\"]\n  );\n  console.log(full_dates);\n  var dataset_dictionary = {};\n  // {\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"01-03-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},\n\n  // // Create dataset of values for each transform and subtransform\n  for (var transform_index in response[2][\"value\"]) {\n    var transform = response[2][\"value\"][transform_index];\n    const ticker = transform[\"ticker\"];\n    const transform_name = transform[\"transformation\"];\n    for (var day_index in transform[\"values\"]) {\n      var day = transform[\"values\"][day_index];\n      for (var value_index in day[\"values\"]) {\n        var value = day[\"values\"][value_index];\n        var value_name = Object.keys(value)[0];\n        var dataset_name =\n          ticker + \" (\" + transform_name + \")\" + \" â€” \" + value_name;\n        if (!Object.keys(dataset_dictionary).includes(dataset_name)) {\n          dataset_dictionary[dataset_name] = [];\n        }\n        dataset_dictionary[dataset_name].push(value[value_name]);\n      }\n    }\n  }\n  // Convert dictionary into dataset\n  var datasets = [];\n  Object.keys(dataset_dictionary).forEach(function (key) {\n    datasets.push({\n      name: key,\n      chartType: \"line\",\n      values: dataset_dictionary[key],\n    });\n  });\n  console.log(dataset_dictionary);\n  console.log(datasets);\n\n  const data = {\n    labels: full_dates,\n\n    datasets: datasets,\n\n    yMarkers: [{ label: \"High\", value: 60, options: { labelPos: \"left\" } }],\n  };\n\n  return (\n    <ReactFrappeChart\n      data={data}\n      title=\"APPL vs. MACD(MSFT)\"\n      type=\"axis-mixed\"\n      height=\"600\"\n      colors={[\"#25282A\", \"#492083\", \"light-blue\"]}\n      axisOptions={{\n        xAxisMode: \"tick\",\n        xIsSeries: true,\n      }}\n      barOptions={{\n        stacked: false,\n        spaceRatio: 0.2,\n      }}\n      tooltipOptions={{\n        formatTooltipX: (d) => (d + \"\").toUpperCase(),\n        formatTooltipY: (d) => d + \" pts\",\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}