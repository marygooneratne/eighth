{"ast":null,"code":"var _jsxFileName = \"/Users/Goon/Desktop/eighth/app/src/components/ExplorerGraph.js\";\nimport { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport React, { useState } from \"react\"; //import 'graphstyle.css';\n\nimport ReactFrappeChart from \"react-frappe-charts\";\n\nvar get_dates_before = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = 0;\n\n  while (fullArray[dateIndex] != stopDate) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex++;\n  }\n\n  return dateArray;\n};\n\nvar get_dates_after = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = fullArray.length - 1;\n\n  while (fullArray[dateIndex] != stopDate) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex--;\n  }\n\n  return dateArray;\n};\n\nvar parse_response = function (resp) {\n  var change_transform = function (org) {\n    var changed = org[\"values\"];\n\n    for (var i = 0; i < changed.length; i++) {\n      changed[i][\"date\"] = new Date(changed[i][\"date\"]);\n    }\n\n    return changed;\n  };\n\n  var parsed = JSON.parse(resp);\n  parsed[0][\"value\"] = new Date(parsed[0][\"value\"]);\n  parsed[1][\"value\"] = new Date(parsed[1][\"value\"]);\n  var parsed_transforms = parsed[2][\"value\"];\n  parsed_transforms = parsed_transforms.map(transform => change_transform(transform));\n  parsed[2][\"value\"] = parsed_transforms;\n  return parsed;\n};\n\nexport const ExplorerGraph = () => {\n  const json = '[{\"name\": \"start_date\", \"value\":\"01-01-2020\"},{\"name\": \"end_date\", \"value\":\"01-04-2020\"}, {\"name\": \"Transformations\", \"value\": [{\"ticker\": \"AAPL\",\"transformation\": \"Close\",\"values\":[{\"date\":\"01-01-2020\",\"values\":[{\"Close\": 345.45}]},{\"date\":\"01-02-2020\",\"values\":[{\"Close\": 325.45}]}]},{\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"01-03-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71}, {\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]},{\"date\": \"01-04-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},{\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]}]}]}]'; // Parse and label parts of response\n\n  var esponse = parse_response(json);\n  t = response[2];\n  t_values = t[\"value\"];\n  start_date = response[0][\"value\"];\n  end_date = response[1][\"value\"]; // Find transform with << start date and >>> end date\n\n  correct_start = t_values.filter(transform => transform[0][\"date\"].getTime() == start_date.getTime())[0];\n  correct_end = t_values.filter(transform => transform[transform.length - 1][\"date\"].getTime() == end_date.getTime())[0]; // create array of dates from earliest start and array of dates from latest start\n\n  start_array = correct_start.map(data => data[\"date\"].toString());\n  end_array = correct_end.map(data => data[\"date\"].toString()); // iterate through transforms and add empty dates to create consistent length\n\n  for (var i = 0; i < t_values.lenght; i++) {\n    var full_values = t_values[i];\n    prepend_dates = get_dates_before(start_array, full_values[0][\"date\"]);\n\n    for (new_date in prepend_dates) {\n      entry = {\n        date: new_date,\n        values: []\n      };\n      full_values.unshift(entry);\n    }\n\n    append_dates = get_dates_after(end_array, full_values[full_values.length - 1][\"date\"]);\n\n    for (new_date in append_dates) {\n      entry = {\n        date: new_date,\n        values: []\n      };\n      full_values.push(entry);\n    }\n\n    t_values[i] = full_values; //can u change array in for each loop\n  }\n\n  reponse[2][\"value\"] = t_values; //split\n  // Create full date array\n\n  full_dates = response[2][\"value\"].map(full => full[\"date\"]);\n  dataset_dictionary = {}; // {\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"01-03-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},\n  // Create dataset of values for each transform and subtransform\n\n  for (transform_index in response[2][\"values\"]) {\n    transform = response[2][\"values\"][transform_index];\n    const ticker = transform[\"ticker\"];\n    const transform_name = transform[\"transformation\"];\n\n    for (day_index in transform[\"values\"]) {\n      day = transform[\"values\"][day_index];\n\n      for (value_index in day[\"values\"]) {\n        value = day[\"values\"][value_index];\n        value_name = value.keys()[0];\n        dataset_name = ticker + \"(\" + transform_name + \")\" + \" â€” \" + value_name;\n\n        if (!dataset_dictionary.keys().contains(dataset_name)) {\n          dataset_dictionary[dataset_name] = [];\n        }\n\n        dataset_dictionary[dataset_name].push(value[value_name]);\n      }\n    }\n  } // Convert dictionary into dataset\n\n\n  datasets = [];\n\n  for (dataset in dataset_dictionary) {}\n\n  Object.keys(dataset_dictionary).forEach(function (key) {\n    datasets.push({\n      name: key,\n      chartType: \"line\",\n      values: dataset_dictionary[key]\n    });\n  });\n  const data = {\n    labels: full,\n    datasets: datasets,\n    yMarkers: [{\n      label: \"High\",\n      value: 60,\n      options: {\n        labelPos: \"left\"\n      }\n    }]\n  };\n  return /*#__PURE__*/React.createElement(ReactFrappeChart, {\n    data: data,\n    title: \"APPL vs. MACD(MSFT)\",\n    type: \"axis-mixed\",\n    height: \"600\",\n    colors: [\"#25282A\", \"#492083\", \"light-blue\"],\n    axisOptions: {\n      xAxisMode: \"tick\",\n      xIsSeries: true\n    },\n    barOptions: {\n      stacked: false,\n      spaceRatio: 0.2\n    },\n    tooltipOptions: {\n      formatTooltipX: d => (d + \"\").toUpperCase(),\n      formatTooltipY: d => d + \" pts\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/Goon/Desktop/eighth/app/src/components/ExplorerGraph.js"],"names":["Chart","React","useState","ReactFrappeChart","get_dates_before","fullArray","stopDate","dateArray","dateIndex","push","get_dates_after","length","parse_response","resp","change_transform","org","changed","i","Date","parsed","JSON","parse","parsed_transforms","map","transform","ExplorerGraph","json","esponse","t","response","t_values","start_date","end_date","correct_start","filter","getTime","correct_end","start_array","data","toString","end_array","lenght","full_values","prepend_dates","new_date","entry","date","values","unshift","append_dates","reponse","full_dates","full","dataset_dictionary","transform_index","ticker","transform_name","day_index","day","value_index","value","value_name","keys","dataset_name","contains","datasets","dataset","Object","forEach","key","name","chartType","labels","yMarkers","label","options","labelPos","xAxisMode","xIsSeries","stacked","spaceRatio","formatTooltipX","d","toUpperCase","formatTooltipY"],"mappings":"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","sourcesContent":["import { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport React, { useState } from \"react\";\n//import 'graphstyle.css';\nimport ReactFrappeChart from \"react-frappe-charts\";\n\nvar get_dates_before = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = 0;\n  while (fullArray[dateIndex] != stopDate) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex++;\n  }\n  return dateArray;\n};\n\nvar get_dates_after = function (fullArray, stopDate) {\n  var dateArray = [];\n  var dateIndex = fullArray.length - 1;\n  while (fullArray[dateIndex] != stopDate) {\n    dateArray.push(fullArray[dateIndex]);\n    dateIndex--;\n  }\n  return dateArray;\n};\n\nvar parse_response = function (resp) {\n  var change_transform = function (org) {\n    var changed = org[\"values\"];\n    for (var i = 0; i < changed.length; i++) {\n      changed[i][\"date\"] = new Date(changed[i][\"date\"]);\n    }\n    return changed;\n  };\n\n  var parsed = JSON.parse(resp);\n\n  parsed[0][\"value\"] = new Date(parsed[0][\"value\"]);\n  parsed[1][\"value\"] = new Date(parsed[1][\"value\"]);\n\n  var parsed_transforms = parsed[2][\"value\"];\n  parsed_transforms = parsed_transforms.map((transform) =>\n    change_transform(transform)\n  );\n  parsed[2][\"value\"] = parsed_transforms;\n\n  return parsed;\n};\n\nexport const ExplorerGraph = () => {\n  const json =\n    '[{\"name\": \"start_date\", \"value\":\"01-01-2020\"},{\"name\": \"end_date\", \"value\":\"01-04-2020\"}, {\"name\": \"Transformations\", \"value\": [{\"ticker\": \"AAPL\",\"transformation\": \"Close\",\"values\":[{\"date\":\"01-01-2020\",\"values\":[{\"Close\": 345.45}]},{\"date\":\"01-02-2020\",\"values\":[{\"Close\": 325.45}]}]},{\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"01-03-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71}, {\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]},{\"date\": \"01-04-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},{\"Resistance 2\": 348.71},{\"Support 1\": 343.71},{\"Support 2\": 341.71}]}]}]}]';\n  // Parse and label parts of response\n  var esponse = parse_response(json);\n  t = response[2];\n  t_values = t[\"value\"];\n  start_date = response[0][\"value\"];\n  end_date = response[1][\"value\"];\n\n  // Find transform with << start date and >>> end date\n  correct_start = t_values.filter(\n    (transform) => transform[0][\"date\"].getTime() == start_date.getTime()\n  )[0];\n  correct_end = t_values.filter(\n    (transform) =>\n      transform[transform.length - 1][\"date\"].getTime() == end_date.getTime()\n  )[0];\n\n  // create array of dates from earliest start and array of dates from latest start\n  start_array = correct_start.map((data) => data[\"date\"].toString());\n  end_array = correct_end.map((data) => data[\"date\"].toString());\n\n  // iterate through transforms and add empty dates to create consistent length\n  for (var i = 0; i < t_values.lenght; i++) {\n    var full_values = t_values[i];\n    prepend_dates = get_dates_before(start_array, full_values[0][\"date\"]);\n    for (new_date in prepend_dates) {\n      entry = { date: new_date, values: [] };\n      full_values.unshift(entry);\n    }\n\n    append_dates = get_dates_after(\n      end_array,\n      full_values[full_values.length - 1][\"date\"]\n    );\n    for (new_date in append_dates) {\n      entry = { date: new_date, values: [] };\n      full_values.push(entry);\n    }\n    t_values[i] = full_values; //can u change array in for each loop\n  }\n  reponse[2][\"value\"] = t_values;\n\n  //split\n  // Create full date array\n\n  full_dates = response[2][\"value\"].map((full) => full[\"date\"]);\n  dataset_dictionary = {};\n  // {\"ticker\": \"AAPL\",\"transformation\": \"Pivot Points\", \"values\":[{\"date\":\"01-03-2020\",\"values\":[{\"Pivot\": 345.45},{\"Resistance 1\": 346.71},\n\n  // Create dataset of values for each transform and subtransform\n  for (transform_index in response[2][\"values\"]) {\n    transform = response[2][\"values\"][transform_index];\n    const ticker = transform[\"ticker\"];\n    const transform_name = transform[\"transformation\"];\n\n    for (day_index in transform[\"values\"]) {\n      day = transform[\"values\"][day_index];\n      for (value_index in day[\"values\"]) {\n        value = day[\"values\"][value_index];\n        value_name = value.keys()[0];\n        dataset_name = ticker + \"(\" + transform_name + \")\" + \" â€” \" + value_name;\n        if (!dataset_dictionary.keys().contains(dataset_name)) {\n          dataset_dictionary[dataset_name] = [];\n        }\n        dataset_dictionary[dataset_name].push(value[value_name]);\n      }\n    }\n  }\n\n  // Convert dictionary into dataset\n  datasets = [];\n  for (dataset in dataset_dictionary) {\n  }\n\n  Object.keys(dataset_dictionary).forEach(function (key) {\n    datasets.push({\n      name: key,\n      chartType: \"line\",\n      values: dataset_dictionary[key],\n    });\n  });\n\n  const data = {\n    labels: full,\n\n    datasets: datasets,\n\n    yMarkers: [{ label: \"High\", value: 60, options: { labelPos: \"left\" } }],\n  };\n\n  return (\n    <ReactFrappeChart\n      data={data}\n      title=\"APPL vs. MACD(MSFT)\"\n      type=\"axis-mixed\"\n      height=\"600\"\n      colors={[\"#25282A\", \"#492083\", \"light-blue\"]}\n      axisOptions={{\n        xAxisMode: \"tick\",\n        xIsSeries: true,\n      }}\n      barOptions={{\n        stacked: false,\n        spaceRatio: 0.2,\n      }}\n      tooltipOptions={{\n        formatTooltipX: (d) => (d + \"\").toUpperCase(),\n        formatTooltipY: (d) => d + \" pts\",\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}