{"ast":null,"code":"var _jsxFileName = \"/Users/Goon/Desktop/eighth/app/src/components/ExplorerGraph.js\";\nimport { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport React, { useState } from \"react\"; //import \"graphstyle.css\";\n\nimport ReactFrappeChart from \"react-frappe-charts\";\nconst X_AXIS_OPTIONS = {\n  daily: [],\n  weekly: [],\n  monthly: [],\n  yearly: []\n};\nconst YEAR_DAYS = 365;\nconst WEEK_DAYS = 7;\nconst MONTH_DAYS = 30;\n\nvar date_diff_indays = function (date1, date2) {\n  dt1 = new Date(date1);\n  dt2 = new Date(date2);\n  return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate())) / (1000 * 60 * 60 * 24));\n};\n\nvar earliest_date = function (dates) {\n  if (dates.length == 0) return null;\n  var earliestDate = dates[0];\n\n  for (var i = 1; i < dates.length; i++) {\n    var currentDate = dates[i];\n\n    if (currentDate < earliestDate) {\n      earliestDate = currentDate;\n    }\n  }\n\n  return earliestDate;\n};\n\nvar latest_date = function (dates) {\n  if (dates.length == 0) return null;\n  var latest_date = dates[0];\n\n  for (var i = 1; i < dates.length; i++) {\n    var currentDate = dates[i];\n\n    if (currentDate > latest_date) {\n      latest_date = currentDate;\n    }\n  }\n\n  return latest_date;\n};\n\nexport default function ExplorerGraph(props) {\n  /**   {\n        {'name': 'ticker', 'value': 'APPL'},\n        {'name': 'daily', 'value': [[\n            {'name': 'date', 'value': 2020-08-20},\n            {'name': 'open', 'value': 390.07},\n            {'name': 'close', 'value': 392.07},\n            {'name': 'high', 'value': 392.09},\n            {'name': 'low', 'value': 388.17},\n            {'name': 'volume', 'value': 3423420}\n            ],\n            [\n            {'name': 'date', 'value': 2020-08-21},\n            {'name': 'open', 'value': 390.07},\n            {'name': 'close', 'value': 392.07},\n            {'name': 'high', 'value': 392.09},\n            {'name': 'low', 'value': 388.17},\n            {'name': 'volume', 'value': 3423420}\n            ]\n        }\n        ]\n    }*/\n  start_date = earliest_date(response.map(data => data[\"start_date\"]));\n  end_date = latest_date(response.map(data => data[\"end_date\"]));\n  blank_value = {\n    date: null,\n    values: {\n      value: null\n    }\n  };\n\n  for (ticker in response) {\n    while (values[0][date] < start_date) {}\n  }\n\n  const data = {\n    labels: [\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\", \"June\", \"July\", \"Aug\"],\n    datasets: [{\n      name: \"APPL\",\n      chartType: \"line\",\n      values: [320, 320, 342, 280, 58, 12, -17, 37]\n    }, {\n      name: \"MSFT\",\n      chartType: \"line\",\n      values: [134, 120, 133, 156, 180, 200, 217, 237]\n    }],\n    yMarkers: [{\n      label: \"High\",\n      value: 60,\n      options: {\n        labelPos: \"left\"\n      }\n    }]\n  };\n  return /*#__PURE__*/React.createElement(ReactFrappeChart, {\n    data: data,\n    title: \"APPL vs. MACD(MSFT)\",\n    type: \"axis-mixed\",\n    height: \"600\",\n    colors: [\"#25282A\", \"#492083\", \"light-blue\"],\n    axisOptions: {\n      xAxisMode: \"tick\",\n      xIsSeries: true\n    },\n    barOptions: {\n      stacked: false,\n      spaceRatio: 0.2\n    },\n    tooltipOptions: {\n      formatTooltipX: d => (d + \"\").toUpperCase(),\n      formatTooltipY: d => d + \" pts\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/Goon/Desktop/eighth/app/src/components/ExplorerGraph.js"],"names":["Chart","React","useState","ReactFrappeChart","X_AXIS_OPTIONS","daily","weekly","monthly","yearly","YEAR_DAYS","WEEK_DAYS","MONTH_DAYS","date_diff_indays","date1","date2","dt1","Date","dt2","Math","floor","UTC","getFullYear","getMonth","getDate","earliest_date","dates","length","earliestDate","i","currentDate","latest_date","ExplorerGraph","props","start_date","response","map","data","end_date","blank_value","date","values","value","ticker","labels","datasets","name","chartType","yMarkers","label","options","labelPos","xAxisMode","xIsSeries","stacked","spaceRatio","formatTooltipX","d","toUpperCase","formatTooltipY"],"mappings":"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","sourcesContent":["import { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport React, { useState } from \"react\";\n\n//import \"graphstyle.css\";\nimport ReactFrappeChart from \"react-frappe-charts\";\n\nconst X_AXIS_OPTIONS = { daily: [], weekly: [], monthly: [], yearly: [] };\nconst YEAR_DAYS = 365;\nconst WEEK_DAYS = 7;\nconst MONTH_DAYS = 30;\n\nvar date_diff_indays = function (date1, date2) {\n  dt1 = new Date(date1);\n  dt2 = new Date(date2);\n  return Math.floor(\n    (Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) -\n      Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate())) /\n      (1000 * 60 * 60 * 24)\n  );\n};\nvar earliest_date = function (dates) {\n  if (dates.length == 0) return null;\n  var earliestDate = dates[0];\n  for (var i = 1; i < dates.length; i++) {\n    var currentDate = dates[i];\n    if (currentDate < earliestDate) {\n      earliestDate = currentDate;\n    }\n  }\n  return earliestDate;\n};\n\nvar latest_date = function (dates) {\n  if (dates.length == 0) return null;\n  var latest_date = dates[0];\n  for (var i = 1; i < dates.length; i++) {\n    var currentDate = dates[i];\n    if (currentDate > latest_date) {\n      latest_date = currentDate;\n    }\n  }\n  return latest_date;\n};\nexport default function ExplorerGraph(props) {\n  /**   {\n        {'name': 'ticker', 'value': 'APPL'},\n        {'name': 'daily', 'value': [[\n            {'name': 'date', 'value': 2020-08-20},\n            {'name': 'open', 'value': 390.07},\n            {'name': 'close', 'value': 392.07},\n            {'name': 'high', 'value': 392.09},\n            {'name': 'low', 'value': 388.17},\n            {'name': 'volume', 'value': 3423420}\n            ],\n            [\n            {'name': 'date', 'value': 2020-08-21},\n            {'name': 'open', 'value': 390.07},\n            {'name': 'close', 'value': 392.07},\n            {'name': 'high', 'value': 392.09},\n            {'name': 'low', 'value': 388.17},\n            {'name': 'volume', 'value': 3423420}\n            ]\n        }\n        ]\n    }*/\n  start_date = earliest_date(response.map((data) => data[\"start_date\"]));\n  end_date = latest_date(response.map((data) => data[\"end_date\"]));\n\n  blank_value = { date: null, values: { value: null } };\n  for (ticker in response) {\n    while (values[0][date] < start_date) {}\n  }\n  const data = {\n    labels: [\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\", \"June\", \"July\", \"Aug\"],\n\n    datasets: [\n      {\n        name: \"APPL\",\n        chartType: \"line\",\n        values: [320, 320, 342, 280, 58, 12, -17, 37],\n      },\n\n      {\n        name: \"MSFT\",\n        chartType: \"line\",\n        values: [134, 120, 133, 156, 180, 200, 217, 237],\n      },\n    ],\n\n    yMarkers: [{ label: \"High\", value: 60, options: { labelPos: \"left\" } }],\n  };\n  return (\n    <ReactFrappeChart\n      data={data}\n      title=\"APPL vs. MACD(MSFT)\"\n      type=\"axis-mixed\"\n      height=\"600\"\n      colors={[\"#25282A\", \"#492083\", \"light-blue\"]}\n      axisOptions={{\n        xAxisMode: \"tick\",\n        xIsSeries: true,\n      }}\n      barOptions={{\n        stacked: false,\n        spaceRatio: 0.2,\n      }}\n      tooltipOptions={{\n        formatTooltipX: (d) => (d + \"\").toUpperCase(),\n        formatTooltipY: (d) => d + \" pts\",\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}